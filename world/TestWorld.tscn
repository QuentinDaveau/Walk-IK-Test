[gd_scene load_steps=83 format=2]

[ext_resource path="res://world/prototyping/block/Block.tscn" type="PackedScene" id=1]
[ext_resource path="res://world/prototyping/textures/tile.png" type="Texture" id=2]
[ext_resource path="res://character/Character.tscn" type="PackedScene" id=3]
[ext_resource path="res://world/prototyping/block/blocking_shader.tres" type="Material" id=4]

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/brightness = 0.1
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=4]
resource_local_to_scene = true
material = SubResource( 3 )

[sub_resource type="CubeMesh" id=5]
resource_local_to_scene = true
material = ExtResource( 4 )

[sub_resource type="Shader" id=6]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 6 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=9]
resource_local_to_scene = true
material = SubResource( 8 )

[sub_resource type="Shader" id=10]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=12]
resource_local_to_scene = true
shader = SubResource( 10 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=13]
resource_local_to_scene = true
material = SubResource( 12 )

[sub_resource type="Shader" id=14]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=15]
resource_local_to_scene = true
shader = SubResource( 14 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=16]
resource_local_to_scene = true
material = SubResource( 15 )

[sub_resource type="Shader" id=34]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=35]
resource_local_to_scene = true
shader = SubResource( 34 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=36]
resource_local_to_scene = true
material = SubResource( 35 )

[sub_resource type="Shader" id=37]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=38]
resource_local_to_scene = true
shader = SubResource( 37 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=39]
resource_local_to_scene = true
material = SubResource( 38 )

[sub_resource type="Shader" id=40]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=41]
resource_local_to_scene = true
shader = SubResource( 40 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=42]
resource_local_to_scene = true
material = SubResource( 41 )

[sub_resource type="Shader" id=43]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=44]
resource_local_to_scene = true
shader = SubResource( 43 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=45]
resource_local_to_scene = true
material = SubResource( 44 )

[sub_resource type="Shader" id=46]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=47]
resource_local_to_scene = true
shader = SubResource( 46 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=48]
resource_local_to_scene = true
material = SubResource( 47 )

[sub_resource type="Shader" id=49]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=50]
resource_local_to_scene = true
shader = SubResource( 49 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=51]
resource_local_to_scene = true
material = SubResource( 50 )

[sub_resource type="Shader" id=52]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=53]
resource_local_to_scene = true
shader = SubResource( 52 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=54]
resource_local_to_scene = true
material = SubResource( 53 )

[sub_resource type="Shader" id=55]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=56]
resource_local_to_scene = true
shader = SubResource( 55 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=57]
resource_local_to_scene = true
material = SubResource( 56 )

[sub_resource type="Shader" id=58]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=59]
resource_local_to_scene = true
shader = SubResource( 58 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=60]
resource_local_to_scene = true
material = SubResource( 59 )

[sub_resource type="Shader" id=61]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=62]
resource_local_to_scene = true
shader = SubResource( 61 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=63]
resource_local_to_scene = true
material = SubResource( 62 )

[sub_resource type="Shader" id=64]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=65]
resource_local_to_scene = true
shader = SubResource( 64 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=66]
resource_local_to_scene = true
material = SubResource( 65 )

[sub_resource type="Shader" id=67]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=68]
resource_local_to_scene = true
shader = SubResource( 67 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=69]
resource_local_to_scene = true
material = SubResource( 68 )

[sub_resource type="Shader" id=70]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=71]
resource_local_to_scene = true
shader = SubResource( 70 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=72]
resource_local_to_scene = true
material = SubResource( 71 )

[sub_resource type="Shader" id=73]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=74]
resource_local_to_scene = true
shader = SubResource( 73 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=75]
resource_local_to_scene = true
material = SubResource( 74 )

[sub_resource type="Shader" id=76]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=77]
resource_local_to_scene = true
shader = SubResource( 76 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=78]
resource_local_to_scene = true
material = SubResource( 77 )

[sub_resource type="Shader" id=79]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=80]
resource_local_to_scene = true
shader = SubResource( 79 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=81]
resource_local_to_scene = true
material = SubResource( 80 )

[sub_resource type="Shader" id=82]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=83]
resource_local_to_scene = true
shader = SubResource( 82 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=84]
resource_local_to_scene = true
material = SubResource( 83 )

[sub_resource type="Shader" id=85]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=86]
resource_local_to_scene = true
shader = SubResource( 85 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=87]
resource_local_to_scene = true
material = SubResource( 86 )

[sub_resource type="Shader" id=88]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=89]
resource_local_to_scene = true
shader = SubResource( 88 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=90]
resource_local_to_scene = true
material = SubResource( 89 )

[sub_resource type="Shader" id=91]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=92]
resource_local_to_scene = true
shader = SubResource( 91 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=93]
resource_local_to_scene = true
material = SubResource( 92 )

[sub_resource type="Shader" id=94]
resource_local_to_scene = true
code = "shader_type spatial;

const float color_mult = 1.0f;

uniform sampler2D grid_texture: hint_albedo;
uniform float brightness: hint_range(0.0f, 1.0f) = 1.0f;



vec3 random(vec3 coord)
{
	vec3 res;
	res.x = fract(sin(dot(coord.yz, vec2(12.9898,78.233))) * 43758.5453123);
	res.y = fract(sin(dot(coord.xz, vec2(16.6539,68.698))) * 69845.5962848);
	res.z = fract(sin(dot(coord.xy, vec2(25.5263,41.256))) * 42538.6985436);
	return res;
}


void fragment() 
{
	vec4 projected_coords = CAMERA_MATRIX * vec4(VERTEX, 1.0);
	vec3 albedoX = texture(grid_texture, projected_coords.zy).rgb;
	vec3 albedoY = texture(grid_texture, projected_coords.xz).rgb;
	vec3 albedoZ = texture(grid_texture, projected_coords.xy).rgb;
	vec3 world_normal = abs(CAMERA_MATRIX * vec4(NORMAL, 0.0)).xyz;
	vec3 normal_weights = world_normal / (world_normal.x + world_normal.y + world_normal.z);
	
	vec3 color_offset = random(floor(projected_coords.xyz));
	
	ALBEDO = mix(vec3(0.0f), mix((albedoX * normal_weights.x + albedoY * normal_weights.y + albedoZ * normal_weights.z), color_offset.rgb, 0.05f), brightness);
}



"

[sub_resource type="ShaderMaterial" id=95]
resource_local_to_scene = true
shader = SubResource( 94 )
shader_param/brightness = 1.0
shader_param/grid_texture = ExtResource( 2 )

[sub_resource type="CubeMesh" id=96]
resource_local_to_scene = true
material = SubResource( 95 )

[sub_resource type="ProceduralSky" id=32]

[sub_resource type="Environment" id=33]
background_mode = 2
background_sky = SubResource( 32 )
ambient_light_color = Color( 0.796078, 0.929412, 1, 1 )
ambient_light_energy = 0.44
ambient_light_sky_contribution = 0.0
ssao_enabled = true

[node name="TestWorld" type="Spatial"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.001, 0.001, 0.001 )

[node name="Geometry" type="Spatial" parent="."]

[node name="Floor" parent="Geometry" instance=ExtResource( 1 )]
transform = Transform( 100, 0, 0, 0, 0.1, 0, 0, 0, 100, 0, -0.1, 0 )
mesh = SubResource( 4 )
skeleton = NodePath("../..")

[node name="Walls" type="Spatial" parent="Geometry"]

[node name="Wall" parent="Geometry/Walls" instance=ExtResource( 1 )]
transform = Transform( 0.1, 0, 0, 0, 6, 0, 0, 0, 100, -99.8656, 6, 0 )
mesh = SubResource( 5 )
skeleton = NodePath("../../..")

[node name="Wall2" parent="Geometry/Walls" instance=ExtResource( 1 )]
transform = Transform( -4.37114e-09, 0, 100, 0, 6, 0, -0.1, 0, -4.37114e-06, 0.134429, 6, 100 )
mesh = SubResource( 5 )
skeleton = NodePath("../../..")

[node name="Wall3" parent="Geometry/Walls" instance=ExtResource( 1 )]
transform = Transform( -4.37114e-09, 0, 100, 0, 6, 0, -0.1, 0, -4.37114e-06, 0.134429, 6, -100 )
mesh = SubResource( 5 )
skeleton = NodePath("../../..")

[node name="Wall4" parent="Geometry/Walls" instance=ExtResource( 1 )]
transform = Transform( 0.1, 0, 0, 0, 6, 0, 0, 0, 100, 100.134, 6, 0 )
mesh = SubResource( 5 )
skeleton = NodePath("../../..")

[node name="Structures" type="Spatial" parent="Geometry"]

[node name="Block2" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 3.32448, 0.707107, 0, -3.32448, 0.707107, 0, -0.0300579, -0.366341 )
mesh = SubResource( 9 )
skeleton = NodePath("../../..")

[node name="Block9" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 3.60158, 0.642788, 0, -3.02208, 0.766045, 5.99807, -0.243762, -0.714413 )
mesh = SubResource( 13 )
skeleton = NodePath("../../..")

[node name="Block5" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 4.07164, 0.5, 0, -2.35076, 0.866025, -2.03984, -0.568395, -1.45691 )
mesh = SubResource( 16 )
skeleton = NodePath("../../..")

[node name="Block7" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 4.54132, 0.258819, 0, -1.21684, 0.965926, -3.9838, -0.80703, -2.68583 )
mesh = SubResource( 36 )
skeleton = NodePath("../../..")

[node name="Block8" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 4.70153, 1.49012e-08, 0, -1.19209e-07, 1, -5.9688, -0.692979, -3.92429 )
mesh = SubResource( 39 )
skeleton = NodePath("../../..")

[node name="Block4" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 3.1551, 0.866025, 0, -5.46479, 0.5, 2.06006, -0.0300579, 1.98539 )
mesh = SubResource( 42 )
skeleton = NodePath("../../..")

[node name="Block6" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -4.37114e-08, -2.89295, 0.258818, 0, 0.77516, 0.965926, -1, 1.26455e-07, -1.13133e-08, -0.636, -0.231603, 17.967 )
mesh = SubResource( 45 )
skeleton = NodePath("../../..")

[node name="Block11" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -4.37114e-08, 2.89295, -0.258819, 0, 0.775163, 0.965926, 1, 1.26455e-07, -1.13133e-08, -5.90901, -0.231603, 17.967 )
mesh = SubResource( 48 )
skeleton = NodePath("../../..")

[node name="Block12" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -5.909, -0.6, 26.048 )
mesh = SubResource( 51 )
skeleton = NodePath("../../..")

[node name="Block13" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -3.909, -0.2, 26.048 )
mesh = SubResource( 54 )
skeleton = NodePath("../../..")

[node name="Block14" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -1.909, 0.2, 26.048 )
mesh = SubResource( 57 )
skeleton = NodePath("../../..")

[node name="Block15" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, 0.091, 0.6, 26.048 )
mesh = SubResource( 60 )
skeleton = NodePath("../../..")

[node name="Block16" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 8.091, -0.6, 26.048 )
mesh = SubResource( 63 )
skeleton = NodePath("../../..")

[node name="Block17" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 6.091, -0.2, 26.048 )
mesh = SubResource( 66 )
skeleton = NodePath("../../..")

[node name="Block18" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 4.091, 0.2, 26.048 )
mesh = SubResource( 69 )
skeleton = NodePath("../../..")

[node name="Block19" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 2.091, 0.6, 26.048 )
mesh = SubResource( 72 )
skeleton = NodePath("../../..")

[node name="Block20" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -5.909, -0.4, 33.048 )
mesh = SubResource( 75 )
skeleton = NodePath("../../..")

[node name="Block21" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -3.909, 0.2, 33.048 )
mesh = SubResource( 78 )
skeleton = NodePath("../../..")

[node name="Block23" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, -1.909, 1, 33.048 )
mesh = SubResource( 81 )
skeleton = NodePath("../../..")

[node name="Block28" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, -1.30916e-07, -1, 0, 2.995, -4.37114e-08, 0.091, 1, 33.048 )
mesh = SubResource( 84 )
skeleton = NodePath("../../..")

[node name="Block24" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 4.091, -0.4, 33.048 )
mesh = SubResource( 87 )
skeleton = NodePath("../../..")

[node name="Block26" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( -1, -2.61831e-07, 3.82137e-15, 0, -1.30916e-07, -1, 8.74228e-08, -2.995, 4.37114e-08, 2.091, 0.2, 33.048 )
mesh = SubResource( 90 )
skeleton = NodePath("../../..")

[node name="Block10" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 3.03912, 0.965926, 0, -11.3422, 0.258819, 4.06006, -0.0300579, 8.1245 )
mesh = SubResource( 93 )
skeleton = NodePath("../../..")

[node name="Block3" parent="Geometry/Structures" instance=ExtResource( 1 )]
transform = Transform( 7.01, 0, 0, 0, -2.20305e-07, 1.5, 0, -5.04, -6.55671e-08, 0, 2.49068, -8 )
mesh = SubResource( 96 )
skeleton = NodePath("../../..")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 33 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 0.892979, 0.101771, 0.438442, -0.444396, 0.353917, 0.822955, -0.0714194, -0.929723, 0.361267, -7.25267e-08, 8.69215, 4.0431e-07 )
shadow_enabled = true

[node name="Character" parent="." instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.173351, 10.0091 )
